<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 润物细无声</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on 润物细无声</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jul 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python 使用 urllib2 发送 PUT 请求</title>
      <link>http://localhost:1313/posts/2022/20222-07-15_17/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022/20222-07-15_17/</guid>
      <description>默认是没法直接设置请求方法为 PUT 的，需要重写请求对象得 get_method 方法，让这个方法返回 PUT&#xA;import urllib2 def put_request(url, data): opener = urllib2.build_opener(urllib2.HTTPHandler) request = urllib2.Request(url, data=data) request.get_method = lambda: &amp;#39;PUT&amp;#39; response = opener.open(request) return response.read() # 示例用法 url = &amp;#39;http://example.com/api&amp;#39; data = &amp;#39;{&amp;#34;key&amp;#34;: &amp;#34;value&amp;#34;}&amp;#39; result = put_request(url, data) print(result) </description>
    </item>
    <item>
      <title>python 是如何查找模块的</title>
      <link>http://localhost:1313/posts/2019/20190708/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2019/20190708/</guid>
      <description>python 中一个模块是一个 .py 后缀的 python 文件，　一个包是指包含若干个 python 文件的文件夹，一般 python 包中都会包含一个 init.py 文件。&#xA;默认情况下， python 会在　$PYTHONPATH 目录中查找包和模块, 要知道 $PYTHONPATH 包含那些目录，可以通过如下代码来查看:&#xA;import sys; print(sys.path) 如果文件不在 $PYTHONPATH 中，　那么是无法通过 import 直接导入的。我们可以通过向　$PYTHONPATH 中追加一个新的目录&#xA;export PYTHONPATH=/path/to/your/package_or_module:$PYTHONPATH 或者&#xA;import sys sys.path.insert(0, &amp;#34;/path/to/your/package_or_module&amp;#34;) 如果你的某个包在 /path/to/your/package_or_module 目录下，那么这时候你就能直接在代码里面 import 这个包了&#xA;import package </description>
    </item>
    <item>
      <title>python项目目录结构建议</title>
      <link>http://localhost:1313/posts/2019/20190310/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2019/20190310/</guid>
      <description>在我们团队，我们看到用python写代码的同学，他们的项目目录结构都非常乱，五花八门，每个同学都是随意的按照自己的喜好来创建文件夹，源码散落在这个文件夹中，很难看出代码的入口是在哪里。&#xA;JAVA有标准的maven目录结构，golang也有建议的目录结构，那么我想python是不是也有一个比较好的目录结构组织方式呢。我看了下几个比较流行的python开源项目。&#xA;flask requests thefuck compose tensorflow django 我也网上查了一下best practice https://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application&#xA;基本上可以归纳出一个比较大众的，符合开源社区习惯的目录结构:&#xA;├── README.md ├── docs ├── project │ ├── __init__.py │ ├── __main__.py │ ├── moduleA │ │ ├── __init__.py │ │ └── packageA.py │ └── moduleB │ └── __init__.py ├── setup.py └── tests └── moduleA └── test_packageA.py 我们可以借鉴这种方式来安排目录结构.</description>
    </item>
    <item>
      <title>python发布到pip仓库</title>
      <link>http://localhost:1313/posts/2019/20190222/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2019/20190222/</guid>
      <description>和java的maven一样，python也有自己的中央仓库https://pypi.org/,也是按照相似的方式来打包项目的，maven靠的pom.xml,而Python靠的是setup.py:&#xA;#!/usr/bin/env python # coding=utf-8 from setuptools import setup &amp;#39;&amp;#39;&amp;#39; 把redis服务打包成C:\Python27\Scripts下的exe文件 &amp;#39;&amp;#39;&amp;#39; setup( name=&amp;#34;RedisRun&amp;#34;, #pypi中的名称，pip或者easy_install安装时使用的名称，或生成egg文件的名称 version=&amp;#34;1.0&amp;#34;, author=&amp;#34;Andreas Schroeder&amp;#34;, author_email=&amp;#34;andreas@drqueue.org&amp;#34;, description=(&amp;#34;This is a service of redis subscripe&amp;#34;), license=&amp;#34;GPLv3&amp;#34;, keywords=&amp;#34;redis subscripe&amp;#34;, url=&amp;#34;https://ssl.xxx.org/redmine/projects/RedisRun&amp;#34;, packages=[&amp;#39;RedisRun&amp;#39;], # 需要打包的目录列表 # 需要安装的依赖 install_requires=[ &amp;#39;redis&amp;gt;=2.10.5&amp;#39;, &amp;#39;setuptools&amp;gt;=16.0&amp;#39;, ], # 添加这个选项，在windows下Python目录的scripts下生成exe文件 # 注意：模块与函数之间是冒号: entry_points={&amp;#39;console_scripts&amp;#39;: [ &amp;#39;redis_run = RedisRun.redis_run:main&amp;#39;, ]}, # long_description=read(&amp;#39;README.md&amp;#39;), classifiers=[ # 程序的所属分类列表 &amp;#34;Development Status :: 3 - Alpha&amp;#34;, &amp;#34;Topic :: Utilities&amp;#34;, &amp;#34;License :: OSI Approved :: GNU General Public License (GPL)&amp;#34;, ], # 此项需要，否则卸载时报windows error zip_safe=False ) python的打包方式:</description>
    </item>
    <item>
      <title>这可能是局域网内分享文件的最佳方案</title>
      <link>http://localhost:1313/posts/2018/20180525/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180525/</guid>
      <description>标题中说是局域网，但是并没有限制你在公网上使用这种方式来单向传出文件，只要是HTTP协议能够正常工作的网络就行。通常发送文件给同事，都是用钉钉，QQ，微信或者的别的社交软件，或者是U盘(很少用到)。使用社交软件传文件的坏处就是这个文件要先发送到服务器，然后对人从服务器上下载，可能文件挺大的，速度慢，也不支持断点传输，也可能是机密文件，你不想被第三方获取。使用U盘缺点是，你要先把文件拷贝到U盘，然后从U盘拷贝到对方的电脑，速度慢，问题是我根本就没有U盘，或者文件在一台U盘无法工作阿里云服务器。所以我这里给出的解决方案是Python内置的HTTP服务器，优点是*nix都自带了python，所需不需要安装任何依赖。即便是widnows，安装python也非常的简单。同事让我发个什么文件给他，我都懒得发，都是把这个进程打开，让他自己下载。&#xA;python 2.x&#xA;// 默认是8000端口 python -m SimpleHTTPServer // 设置为80端口 python -m SimpleHTTPServer 80 [deploy@baochai ~]$ python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... 192.168.1.46 - - [25/May/2018 09:11:50] code 501, message Unsupported method (&amp;#39;OPTIONS&amp;#39;) 192.168.1.46 - - [25/May/2018 09:11:50] &amp;#34;OPTIONS / HTTP/1.1&amp;#34; 501 - 192.168.1.46 - - [25/May/2018 09:12:53] &amp;#34;GET / HTTP/1.1&amp;#34; 200 - 192.168.1.46 - - [25/May/2018 09:12:54] code 404, message File not found 192.168.1.46 - - [25/May/2018 09:12:54] &amp;#34;GET /favicon.</description>
    </item>
    <item>
      <title>源码安装Python</title>
      <link>http://localhost:1313/posts/2018/20180510-1/</link>
      <pubDate>Thu, 10 May 2018 21:57:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180510-1/</guid>
      <description>&amp;amp;bnsp; 今天同事向我抱怨，服务上的python版本太低了，他想把python版本升级到2.7.10，但是他没有root权限，使用yum更新python是需要root权限。求人不如求自己,所以自己动手，我告诉它用源码安装，它说源码安装以后会覆盖当前的默认python,我告诉它，可以单独源码安装python，不需要覆盖默认的Python，可以两个版本并存。这里记录一下安装的过程，这里我们以安装Python 3.4为例子。&#xA;下载Python-3.4.0a4.tar.xz 解压 tar -xvf Python-3.4.0a4.tar.xz 生成makefile文件,这里我们设置python安装到 /home/hellojukay/Data/Bin/python这个目录中 # 这不操作可能需要半分钟左右 ./configure --prefix=/home/hellojukay/Data/Bin/python/ 生成了Makefile文件，我们来编译python # 这里时间也会比较长，C、C++语言编译大型项目都比较慢,这个是个梗了 hellojukay@deepin:~/Data/Bin/Python-3.4.0a4$ make 安装编译好的python到之前设置的目录。 hellojukay@deepin:~/Data/Bin/Python-3.4.0a4$ make install 这里我们已经安装好了，可以到对应目录看一下。&#xA;hellojukay@deepin:~/Data/Bin/python$ ll 总用量 24 drwxr-sr-x 6 hellojukay hellojukay 4096 5月 10 22:17 . drwxr-sr-x 8 hellojukay hellojukay 4096 5月 10 22:11 .. drwxr-sr-x 2 hellojukay hellojukay 4096 5月 10 22:17 bin drwxr-sr-x 3 hellojukay hellojukay 4096 5月 10 22:17 include drwxr-sr-x 4 hellojukay hellojukay 4096 5月 10 22:17 lib drwxr-sr-x 3 hellojukay hellojukay 4096 5月 10 22:17 share hellojukay@deepin:~/Data/Bin/python$ 把bin目录加入到path中，我们就能正常使用了。</description>
    </item>
  </channel>
</rss>
