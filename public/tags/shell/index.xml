<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 润物细无声</title>
    <link>http://localhost:1313/tags/shell/</link>
    <description>Recent content in Shell on 润物细无声</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Nov 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【翻译】谷歌shell编程规范</title>
      <link>http://localhost:1313/posts/2018/20181113/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20181113/</guid>
      <description>使用哪一种shell解释器。 bash应该是一唯一使用的脚本解释器，除此之外，你不应该使用其他的解释器的特性,除非你真的需要，或者是条件限制。确保你的脚本在移植到其他机器上也能够正常执行。bash脚本应该都包含一个shanbang,#!/bin/bash。&#xA;什么时候应该是shell。 shell只应该被用来做一些很小的工具，或者是一些脚本的包装。 虽然shell不知一个正规的编程语言，但是google内部还是有很多地方在使用它。为了避免滥用，你应该准守如下规则:&#xA;如果只是调用一些其他的工具，或者只是简单的处理输出，可以使用shell。 如果你在意执行速度，那么不要使用shell,使用其他语言。 如果你发现除了使用常规变量之外，你还需要使用数组，就像${PIPESTATUS},那么你应该使用python。 如果你发现你的脚本长度超过了100行代码，那么你应该使用python来重写他，随着代码长度的增加，你应该尽快重构你的代码。 应该使用哪种后缀名。 我们强烈的建议你不要使用后缀名或者使用.sh作为后缀名。如果是最为依赖库，那么应该用.sh作为后缀名，并且不应该有执行权限。当我们执行一个脚本的时候，不需要知道他是哪种语言编写，并且shell也并没有shell也没有要求使用后缀名。然而，作为库代码，应该表明是使用哪种语言编写的，应该使用后缀来表明他的实现语言，比如.bash。&#xA;SUID和SGID。 shell脚本禁止使用SUID和SGID功能。 因为有太多的安全事故，所以必须禁止shell使用SUID和SGID,虽然在大部分平台上是难以开启这项功能的，但是某些平台上还是可以的，所以必须要禁止他，如果要获取权限，应该使用sudo。&#xA;标准输出与标准错误输出。 所有的错误都应该被打印到标准错误输出stderr,这样更加方便正常信息和错误信息。建议使用一个单独的函数来输出错误信息:&#xA;err() { echo &amp;#34;[$(date +&amp;#39;%Y-%m-%dT%H:%M:%S%z&amp;#39;)]: $@&amp;#34; &amp;gt;&amp;amp;2 } if ! do_something; then err &amp;#34;Unable to do_something&amp;#34; exit &amp;#34;${E_DID_NOTHING}&amp;#34; fi 文件头。 每个脚本的开头都必须有一段注释来描述这个脚本的内容。&#xA;函数注释。 不管函数的长度是多少，都应该添加注释。对于所有的库函数，都应该有注释描述。任何在使用库函数的时候，都应该能够通过注释的描述来使用这个库函数，或者是使用函数提供的--help选项（如果提供了的话）。函数的注释应该包含如下信息:&#xA;函数的描述 全局变量的使用和修改 函数的参数说明 函数的返回值和退出状态说明 例如： #!/bin/bash # # Perform hot backups of Oracle databases. export PATH=&amp;#39;/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin&amp;#39; ####################################### # Cleanup files from the backup dir # Globals: # BACKUP_DIR # ORACLE_SID # Arguments: # None # Returns: # None ####################################### cleanup() { .</description>
    </item>
    <item>
      <title>mac下格式化U盘</title>
      <link>http://localhost:1313/posts/2018/20180914/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180914/</guid>
      <description>查看U盘所在的分区&#xA;[jukay@mac-pro]~$ diskutil list /dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *121.3 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_CoreStorage Macintosh HD 120.5 GB disk0s2 3: Apple_Boot Recovery HD 650.0 MB disk0s3 /dev/disk1 (internal, virtual): #: TYPE NAME SIZE IDENTIFIER 0: Apple_HFS Macintosh HD +120.1 GB disk1 Logical Volume on disk0s2 CDE1D658-8C57-40FD-AA38-46EFB615DE3C Unencrypted /dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *31.9 GB disk2 1: DOS_FAT_32 31.</description>
    </item>
    <item>
      <title>shell多进程编程</title>
      <link>http://localhost:1313/posts/2018/20180701/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180701/</guid>
      <description>#!/usr/bin/env bash mysleep() { echo &amp;#34;sleep $1 seconds&amp;#34; sleep &amp;#34;$1&amp;#34; } main() { for ((i = 1; i &amp;lt; 10; i++)); do (mysleep $i) &amp;amp; done wait } time main 直接上了,这里要说明的是,把一行命令包起来表示用子shell来执行，而不是当前进程的shell,　＆　表示让当前进程到后台执行，不阻塞当前进程，这里的&amp;amp;非常关键，如果没有&amp;amp;就还是顺序执行，大家可以试一下，下面的wait命令也非常关键，表示等待当前进程的所有子进程返回，没有这里wait命令，main进程会提前退出，那么就有可能有命令没有执行完全．&#xA;hellojukay@deepin:~/Data/Code/Web/blog$ bash source/_posts/20180701/mysleep.sh sleep 1 seconds sleep 2 seconds sleep 3 seconds sleep 4 seconds sleep 5 seconds sleep 6 seconds sleep 7 seconds sleep 8 seconds sleep 9 seconds real 0m9.004s user 0m0.011s sys 0m0.006s 可以看到这里只使用了９秒钟，因为他是并行的．如果去掉 &amp;amp; ,那么有可能是45秒钟左右，如果去掉wait，可能就是不到一秒钟就结束了．</description>
    </item>
    <item>
      <title>你可能不知道的shell快捷键</title>
      <link>http://localhost:1313/posts/2018/20180523/</link>
      <pubDate>Wed, 23 May 2018 09:13:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180523/</guid>
      <description>这里记录一下我在工作中用到的一些shell快捷键，这些快捷键能够大大的提高你在终端下的工作效率。&#xA;ctrl + A 跳转到当前命令行的首部，比如我的命令行的第一个字符输入错误了，或者命令忘记加上sudo了，ctrl + A就能修改你的输入错误。 ctrl + E 跳转到当前命令行的尾部 ctrl + R 搜索历史命令，这个比fish的自动补全要强大很多 ctrl + P 回到上一条命， p -&amp;gt; pre ，对于没有上下键的键盘来说，这个快捷键简直就是神器 ctrl + L 清空当前的终端，这比手动输入clear要来的快(貌似在windows的cmd中也管用) ctrl + C 丢弃当前命令行输入,这个也非常好用，有时候我输入命令了，但是我并不想执行这条命令(可能会与复制命令冲突，需要修改终端快捷键) ctrl + B 向左移动光标 ctrl + F 向右移动光标 ctrl + K 从光标当前位置剪切到行尾 ctrl + W 从光标当前位置剪切，知道遇到第一个空格 ctrl + U 从光标当前位置剪切到行首 ctrl + Y 粘贴以上几个剪切命令的内容（不包括系统剪切板的内容） ctrl + H 向左删除一个字符 ctrl + D 向右删除一个字符 ctrl + T 交换光标左右两个字符的位置,如果光标在行尾，会交换前两个字符的位置 ctrl + M 或者 ctrl + J 功能和回车键一致（用处不大） </description>
    </item>
    <item>
      <title>vscode插件系列（shellcheck）</title>
      <link>http://localhost:1313/posts/2018/20180508/</link>
      <pubDate>Tue, 08 May 2018 20:42:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180508/</guid>
      <description>shellcheck简介 不知道什么时候开始，我已经从一个开发变成了一个半开发半运维的程序员了，在我的工作中，运维和开发同等的重要。编写shell脚本和编写golang,java代码也是同样的多。通常我使用vscode来编写shell脚本，除了java，我一切的代码编写工作都是使用vscode编辑器完成的。所以这里介绍一款shell语法检查的lint工具，shellcheck类似于jslint或者tslint这类的工具。如果你不希望你的shell脚本中不小心混入了sudo rm -rf / ,你就应该使用shellcheck, shellcheck的官网地址是:&#xA;https://www.shellcheck.net 打开官网以后,你可以在文本编辑窗口输入你的shell脚本，如果你代码有不恰当的地方，你会收到提示。&#xA;插件安装 在vscode的插件搜索框输入shell，你就能搜索到shellcheck了，它的图标大概是下面这个样子: shellcheck这个插件需要安装shellcheck这个命令行工具,我们可以在github上找到这个项目的仓库:&#xA;https://github.com/koalaman/shellchecks 下面是这个软件在各种操作系统下的安装方法:&#xA;max osx&#xA;brew install shellcheck FreeBSD&#xA;pkg install hs-ShellCheck openSUSE&#xA;zypper in ShellCheck Arch Linux&#xA;pacman -S shellcheck Debian&#xA;apt-get install shellcheck CentOS&#xA;yum -y install epel-release yum install ShellChecks 这里安装完了shellcheck以后，我们再为vscode安装shellcheck插件就能生效了，如果是安装shellcheck检查，插件是不生效的。这里提一句，shellcheck命令是可以单独使用的，具体使用方式如下:&#xA;正在处理用于 man-db (2.7.6.1-2) 的触发器 ... hellojukay@deepin:~/Data/Code/Web/blog$ shellcheck No files specified. Usage: shellcheck [OPTIONS...] FILES... -e CODE1,CODE2.. --exclude=CODE1,CODE2.. exclude types of warnings -f FORMAT --format=FORMAT output format -C[WHEN] --color[=WHEN] Use color (auto, always, never) -s SHELLNAME --shell=SHELLNAME Specify dialect (sh,bash,dash,ksh) -x --external-sources Allow &amp;#39;source&amp;#39; outside of FILES.</description>
    </item>
  </channel>
</rss>
