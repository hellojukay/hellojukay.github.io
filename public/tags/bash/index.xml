<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on 润物细无声</title>
    <link>http://localhost:1313/tags/bash/</link>
    <description>Recent content in Bash on 润物细无声</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>有那些相见恨晚的Linux命令</title>
      <link>http://localhost:1313/posts/2018/20181112/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20181112/</guid>
      <description>在reddit上看到一个热门帖子，内容是：一人给一个你相见恨晚的Linux命令。&#xA;disown 这是一个bash内置命令，如果你需要将当前程序在后台运行的时候，有两个方式，1.让当前程序在新的session中运行。2.程序内部处理SIGUP信号，nohup就只这种工作方式。disown这个命令也能达到相同的功能。更多内容参考: https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/&#xA;touch log gdb -p 22499 (gdb) p close(1) # This closes the stdout of the running process (gdb) p open(&amp;#34;/home/.../log&amp;#34;, 1) # This will open the log-file with O_WRITE (gdb) c 这是一种非常hack的方式来将一个已经正在运行的程序的标准输出重定向到文件。更多内容参考: https://github.com/nelhage/reptyr&#xA;cat ~/.ssh/id_dsa.pub | ssh me@remotebox &amp;#34;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#34; 通过ssh连接跨机器使用管道符,这也是比较hack的一种方式。顺便说一句，scp也是使用的ssh协议，所以在使用scp的时候，如果你配置了秘钥，那么scp是可以使用tab键来进行补全提示的。&#xA;fc fc命令能够将上一次执行的命令在编辑器中打开,这个默认的编辑器可以使EDITOR环境变量来设置。&#xA;lsof lsof能够列出当前操作系统打开的所有文件描述符，包括socket,文件等等,与之类似还有一个fuser命令。&#xA;CTRL + L 这是一个快捷键，和clear的功能一样能够快速清空当前的terminal,bash还有很多快捷键，请参考： https://blog.hellojukay.cn/2018/05/23/20180523/。&#xA;man ascii 在mac上下能够按照是十六进制的方式处处ascii码表，很多从事嵌入式开发的程序使用这个小技巧，同样的ascii -x也能实现这个功能.&#xA;xargs 能够将上一个程序的标准输出传给下一个程序的命令行，我最喜欢的功能是:echo xx | xargs -I {} command {}。&#xA;convert convert命令能够进行图片格式转换。</description>
    </item>
    <item>
      <title>bash脚本最佳实践</title>
      <link>http://localhost:1313/posts/2018/20181110/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20181110/</guid>
      <description>我经常会记录一些bash脚本的技巧，然后反复的回味他们，今天我将这些技巧记录在blog里面。&#xA;使用完整的命令选择，而是不是简写选项，当你需要反复使用这段脚本的时候，因为他们更加便于阅读和理解。&#xA;使用set -o errexit(set -e)保证你的脚本在出错的时候退出。&#xA;添加 || true 允许命令失败，或者使用|| ;。&#xA;使用set -o nounset(set -u)保证你的脚本在使用未定义变量时候自动推出。&#xA;使用set -o xtrace(set -x)来打印执行过程，输出调试信息。&#xA;#!/usr/bin/env bash比#!/bin/bash更加合适。&#xA;避免使用#!/usr/bin/env bash -e或者(set -e),因为当有人使用bash ./script.sh出错自动退出的功能会失效。&#xA;使用{}来包裹变量，否在放在访问变量的时候可能会引起歧义。&#xA;判断字符串相等的时候，不需要使用两个等于号if [ &amp;quot;name&amp;quot; = &amp;quot;hellojukay&amp;quot;] 。&#xA;使用:-，当你认为一边变量可能没有定义的时候，if [ &amp;quot;${name:-}&amp;quot; = &amp;quot;hellojukay&amp;quot; ],如果name没有定义，那么name将会被设置为空字符串，你也可以设置以其他的默认值&amp;quot;{name:-hellojukay}&amp;quot;&#xA;定义常量,当前文件名字，当前目录等在脚本的开头几行。&#xA;综上所述，你的脚本应该风格类似下面这段脚本。&#xA;#!/usr/bin/env bash # Bash3 Boilerplate. Copyright (c) 2014, kvz.io set -o errexit set -o pipefail set -o nounset # set -o xtrace # Set magic variables for current file &amp;amp; dir __dir=&amp;#34;$(cd &amp;#34;$(dirname &amp;#34;${BASH_SOURCE[0]}&amp;#34;)&amp;#34; &amp;amp;&amp;amp; pwd)&amp;#34; __file=&amp;#34;${__dir}/$(basename &amp;#34;${BASH_SOURCE[0]}&amp;#34;)&amp;#34; __base=&amp;#34;$(basename ${__file} .</description>
    </item>
    <item>
      <title>【翻译】bash备忘录</title>
      <link>http://localhost:1313/posts/2018/20180609/</link>
      <pubDate>Sat, 09 Jun 2018 23:29:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/20180609/</guid>
      <description>原文地址: http://www.linux-sxs.org/programming/bashcheat.html 本文不会教你如何使用bash，但是他会让你快速的知道bash是什么，让你知道什么是bash脚本。&#xA;基础 bash脚本都需要告诉操作系统，当前使用哪一种解释器来执行这个脚本。写在脚本的第一行,如下：&#xA;#!/bin/bash //或者 #!/usr/bin/env bash #!/bin/node 你必须让脚本拥有可执行权限&#xA;#所有人都拥有执行权 chmod +x filname # 当前用户拥有执行权限 chmod u+x filename 变量 bash的变量没有类型，定义方法如下：&#xA;varname=value n=10 在变量名字前面使用 $ 来使用这个变量，例如：&#xA;n=10 echo $n 命令行参数中的变量通常使用$N来访问，$#表示命令行参数的个数(不包括命令本身)&#xA;command var1 var2 var3 &amp;hellip;. varX&#xA;$# 表示参数个数 $@ 表示所有参数(不包括命令本身) $0 表示 command 命令本身 $1 表示var1 $2 表示var2 依次类推。。。 引用符号 双引号：&amp;ldquo;var&amp;quot;被shell理解为是一个普通的字符串参数，你需要特别注意其中的转义字符。 单引号： &amp;lsquo;var&amp;rsquo;被shell理解为一个单纯的字符，shell会忽略其中的转义字符，不会转义他们。 反引号： var被shell理解为一条需要执行的bash命令，通过会用在子名字中，例如：&#xA;echo `pwd` 逻辑判断 数字比较 test expression 或者 [ expression ]&#xA;int1 -eq int2&#x9;如果int1等于int2,返回true int1 -ge int2&#x9;如果int1大于或者等于int2，返回true int1 -gt int2&#x9;如果int1大于int2，返回true int1 -le int2&#x9;如果int1小于或者等于int2，返回true int1 -lt int2&#x9;如果int1小于int2, 返回true int1 -ne int2&#x9;如果int1不等于int2, 返回true</description>
    </item>
  </channel>
</rss>
